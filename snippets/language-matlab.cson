# MATLAB snippets. Note: Octave and combined MATLAB/Octave snippets below.
".source.matlab":
	"if … else …end":
		prefix: "ife"
		body: '''
				if ${1:condition}
					$2
				else
					$3
				end
			  '''
	"if … elseif … end":
		prefix: "ifeif"
		body: '''
				if ${1:condition}
					${2:body}
				elseif ${3:condition}
					${4:body}
				else
					${5:body}
				end
			'''
	"if … end":
		prefix: "if"
		body: '''
				if ${1:condition}
					$0
				end
			'''
	"switch … case … end":
		prefix: "switch"
		body: '''
				switch ${1:var}
					case ${2:'${3:string}'}
						$0
				end
		'''
	"switch … case … otherwise … end":
		prefix: "switcho"
		body: '''
				switch ${1:var}
					case ${2:'${3:string}'}
						$4
					otherwise
						$0
				end
		'''
	"try … catch … end":
		prefix: "try"
		body: '''
				try
					$1
				catch
					$0
				end
		'''
	"while":
		prefix: "whi"
		body: '''
				while ${1:condition}
					${2:body}
				end
			'''

# Octave snippets
".source.octave":
	"if … else …end":
		prefix: "ife"
		body: '''
				if ${1:condition}
					$2
				else
					$3
				endif
			  '''
	"if … elseif … end":
		prefix: "ifeif"
		body: '''
				if ${1:condition}
					${2:body}
				elseif ${3:condition}
					${4:body}
				else
					${5:body}
				endif
			'''
	"if … end":
		prefix: "if"
		body: '''
				if ${1:condition}
					$0
				endif
			'''
	"switch … case … end":
		prefix: "switch"
		body: '''
				switch ${1:var}
					case ${2:'${3:string}'}
						$0
				endswitch
		'''
	"switch … case … otherwise … end":
		prefix: "switcho"
		body: '''
				switch ${1:var}
					case ${2:'${3:string}'}
						$4
					otherwise
						$0
				endswitch
		'''
	"try … catch … end":
		prefix: "try"
		body: '''
				try
					$1
				catch
					$0
				endtry
		'''
	"while":
		prefix: "whi"
		body: '''
				while ${1:condition}
					${2:body}
				endwhile
			'''

# Combined MATLAB and Octave snippets
".source.matlab, .source.octave":
	"^":
		prefix: "^"
		body: "^($1) $2"
	"case":
		prefix: "case"
		body: '''
				case ${2:'${3:string}'}
					$0
			'''
	"disp sprintf":
		prefix: "dsp"
		body: '''
				disp(sprintf('${1:%s}\\n', $2));
		'''
	"disp":
		prefix: "disp"
		body: "disp('${1:Text}');"
	"dlmwrite":
		prefix: "dlmwrite"
		body: '''
				dlmwrite('${1:filename}.dat', [${2:variables}], ${3:'${4:delimiter}', '${5:\\t}'});
				$0
			  '''
	"else":
		prefix: "else"
		body: '''
				else
					${1:body}
			  '''
	"elseif":
		prefix: "elseif"
		body: '''
				elseif ${1:condition}
					$0
			  '''
	"error":
		prefix: "error"
		body: "error('${1:Description}');"
	"exp":
		prefix: "e"
		body: "exp($1) $2"
	"for … end cell strings":
		prefix: "fors"
		body: '''
				for ${1:s} = transpose(${2:strings}(:)); $1 = $1{1};
					$0
				end
			  '''
	"for … end":
		prefix: "for"
		body: '''
				for ${1:i}=${2:1}${3::${4:n}}
					$0
				end
			  '''
	"fprintf":
		prefix: "fpr"
		body: '''
			fprintf(${1:fid}, ${2:%s}\\n, $3);
		'''
	"function":
		prefix: "function"
		body: '''
			[ ${1:out} ] = ${2:function}( ${3:in} )
			% ${2:function}: ${4:Short description}
			%
			% ${5:Extended description}

			end  % ${2:function}
		'''
	"get":
		prefix: "get"
		body: "get(${1:gca},'${2:PropertyName}');"
	"griddata":
		prefix: "griddata"
		body: "griddata(${1:xx}, ${2:yy}, ${3:zz}, ${4:xi}, ${5:yi}); "
	"line":
		prefix: "line"
		body: '''
				line(${1:xvector},${2:yvector}${3:,'Color','${4:b}','LineWidth',${5:1},'LineStyle','${6:-}'})
			'''
	"nargchk":
		prefix: "nargchk"
		body: '''
				error(nargchk(${1:min}, ${2:max}, ${3:nargin}, `if [[ $TM_USE_OCTAVE -eq '0' ]]; then
					echo -n "'struct'"
				fi` ));

			  '''
	"set":
		prefix: "set"
		body: "set(${1:get(${2:gca},'${3:PropertyName}')},'${4:PropertyName}',${5:PropertyValue});"
	# "small function":
	# 	prefix: "f"
	# 	body: '''
	# 			function ${1:out} = ${2:f}(${3:in})
	# 				$0
	# 			`if [[ $TM_CLOSE_FUNCTIONS -ne '0' ]]
	# 				then
	# 				if [[ $TM_USE_OCTAVE -ne '0' ]]
	# 					then echo "endfunction"
	# 				else
	# 					echo "end"
	# 				fi
	# 			fi`
	# 		  '''
	"sprintf":
		prefix: "spr"
		body: '''
			sprintf('${1:%s}\\n', $2);
		'''
	"title":
		prefix: "zla"
		body: "set(get(gca,'Title'),'String',${1:'${2}'});"
	"unix":
		prefix: "uni"
		body: "[${1:s},${2:w}] = unix('${3:Unix commands}');"
	"warning":
		prefix: "war"
		body: "warning(['${1:Description}']);"
	"xlabel":
		prefix: "xla"
		body: "set(get(gca,'XLabel'),'String',${1:'${2}'});"
	"xtick":
		prefix: "xti"
		body: "set(gca,'XTick',${1:[${2}]});"
	"ylabel":
		prefix: "yla"
		body: "set(get(gca,'YLabel'),'String',${1:'${2}'});"
	"ytick":
		prefix: "yti"
		body: "set(gca,'YTick',${1:[${2}]});"
	"zlabel":
		prefix: "zla"
		body: "set(get(gca,'ZLabel'),'String',${1:'${2}'});"
